Program ::= Stmt ";" Program
Program ::= If Program | While Program
Program ::= ""

Stmt ::= Declaration | Assignment | FunctionCall

Declaration ::= Type Identifier | Type Identifier "=" Expression
Type ::= "string" | "int" | "float" | "bool"

Assignment ::= Identifier "=" Expression

Atom ::= Identifier | StringLiteral | NumberLiteral | BooleanLiteral | FunctionCall

// Operators, in order of precedence
Op0 ::= "*" | "/" | "%"
Op1 ::= "+" | "-"
Op2 ::= "==" | ">" | "<" | ">=" |"<="
Op3 ::= "&&" | "||"

// Term types, matches operators
Term0 ::= Atom Op0 Term0 | Atom // Terms
Term1 ::= Term0 Op1 Term1 | Term0 // Arithmetic exprs
Term2 ::= Term1 Op2 Term2 | Term1 // Comparisons
Expression ::= Term2 Op3 Expression | Term2 // Boolean ops (&& or ||)

StringLiteral ::= Delimited string, with "\" as an escape for quotation marks.
BooleanLiteral ::= "true" | "false"

// Numberliteral recognised in the parse tree as 1 terminal node, this is merely
// to qualify
NumberLiteral ::= NumString |
                  NumString "." NumString |
                  "-" NumString |
                  "-" NumString "." NumString
NumString ::= Digit NumString | Digit
Digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"


FunctionCall ::= Identifier "(" ParameterList ")"
ParameterList ::= Expression "," ParameterList | Expression
Parameter ::= Expression

Control ::= If | While
If ::= "if" "(" Expression ") "{" Program "}"
If ::= "if" "(" Expression ") "{" Program "}" "else" "{" Program "}"
While ::= "if" "(" Expression ") "{" Program "}"
